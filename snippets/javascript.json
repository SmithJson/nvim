{
    "define module": {
        "prefix": "define",
        "body": [
            "define([",
            "\t'require',",
            "\t'${1:dependency}'",
            "], function(require, ${2:factory}) {",
            "\t'use strict';",
            "\t$0",
            "});"
        ],
        "description": "define module"
    },
    "For Loop": {
        "prefix": "for",
        "body": [
            "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
            "\tconst ${3:element} = ${2:array}[${1:index}];",
            "\t$0",
            "}"
        ],
        "description": "For Loop"
    },
    "For-Each Loop": {
        "prefix": "foreach",
        "body": [
            "${1:array}.forEach(${2:element} => {",
            "\t$0",
            "});"
        ],
        "description": "For-Each Loop"
    },
    "For-In Loop": {
        "prefix": "forin",
        "body": [
            "for (const ${1:key} in ${2:object}) {",
            "\tif (Object.hasOwnProperty.call(${2:object}, ${1:key})) {",
            "\t\tconst ${3:element} = ${2:object}[${1:key}];",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "For-In Loop"
    },
    "For-Of Loop": {
        "prefix": "forof",
        "body": [
            "for (const ${1:iterator} of ${2:object}) {",
            "\t$0",
            "}"
        ],
        "description": "For-Of Loop"
    },
    "Function Statement": {
        "prefix": "function",
        "body": [
            "function ${1:name}(${2:params}) {",
            "\t$0",
            "}"
        ],
        "description": "Function Statement"
    },
    "If Statement": {
        "prefix": "if",
        "body": [
            "if (${1:condition}) {",
            "\t$0",
            "}"
        ],
        "description": "If Statement"
    },
    "If-Else Statement": {
        "prefix": "ifelse",
        "body": [
            "if (${1:condition}) {",
            "\t$0",
            "} else {",
            "\t",
            "}"
        ],
        "description": "If-Else Statement"
    },
    "New Statement": {
        "prefix": "new",
        "body": [
            "const ${1:name} = new ${2:type}(${3:arguments});$0"
        ],
        "description": "New Statement"
    },
    "Switch Statement": {
        "prefix": "switch",
        "body": [
            "switch (${1:key}) {",
            "\tcase ${2:value}:",
            "\t\t$0",
            "\t\tbreak;",
            "",
            "\tdefault:",
            "\t\tbreak;",
            "}"
        ],
        "description": "Switch Statement"
    },
    "While Statement": {
        "prefix": "while",
        "body": [
            "while (${1:condition}) {",
            "\t$0",
            "}"
        ],
        "description": "While Statement"
    },
    "Do-While Statement": {
        "prefix": "dowhile",
        "body": [
            "do {",
            "\t$0",
            "} while (${1:condition});"
        ],
        "description": "Do-While Statement"
    },
    "Try-Catch Statement": {
        "prefix": "trycatch",
        "body": [
            "try {",
            "\t$0",
            "} catch (${1:error}) {",
            "\t",
            "}"
        ],
        "description": "Try-Catch Statement"
    },
    "Set Timeout Function": {
        "prefix": "settimeout",
        "body": [
            "setTimeout(() => {",
            "\t$0",
            "}, ${1:timeout});"
        ],
        "description": "Set Timeout Function"
    },
    "Set Interval Function": {
        "prefix": "setinterval",
        "body": [
            "setInterval(() => {",
            "\t$0",
            "}, ${1:interval});"
        ],
        "description": "Set Interval Function"
    },
    "Import external module.": {
        "prefix": "import statement",
        "body": [
            "import { $0 } from \"${1:module}\";"
        ],
        "description": "Import external module."
    },
    "Region Start": {
        "prefix": "#region",
        "body": [
            "//#region $0"
        ],
        "description": "Folding Region Start"
    },
    "Region End": {
        "prefix": "#endregion",
        "body": [
            "//#endregion"
        ],
        "description": "Folding Region End"
    },
    "Log to the console": {
        "prefix": "log",
        "body": [
            "console.log($1);"
        ],
        "description": "Log to the console"
    },
    "Log warning to console": {
        "prefix": "warn",
        "body": [
            "console.warn($1);"
        ],
        "description": "Log warning to the console"
    },
    "Log error to console": {
        "prefix": "error",
        "body": [
            "console.error($1);"
        ],
        "description": "Log error to the console"
    },
    "import": {
        "prefix": "imp",
        "body": "import ${2:moduleName} from '${1:module}';$0",
        "description": "Imports entire module statement in ES6 syntax"
    },
    "importNoModuleName": {
        "prefix": "imn",
        "body": "import '${1:module}';$0",
        "description": "Imports entire module in ES6 syntax without module name"
    },
    "importDestructing": {
        "prefix": "imd",
        "body": "import { $2 } from '${1:module}';$0",
        "description": "Imports only a portion of the module in ES6 syntax"
    },
    "importEverything": {
        "prefix": "ime",
        "body": "import * as ${2:alias} from '${1:module}';$0",
        "description": "Imports everything as alias from the module in ES6 syntax"
    },
    "importAs": {
        "prefix": "ima",
        "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
        "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
    },
    "require": {
        "prefix": "rqr",
        "body": "require('${1:package}');",
        "description": "Require a package"
    },
    "requireToConst": {
        "prefix": "req",
        "body": "const ${1:packageName} = require('${1:package}');$0",
        "description": "Require a package to const"
    },
    "moduleExports": {
        "prefix": "mde",
        "body": "module.exports = {\n\t$0\n};\n",
        "description": "Module exports from Common JS, node syntax at ES6"
    },
    "exportNamedVariable": {
        "prefix": "env",
        "body": "export const ${1:exportVariable} = ${2:localVariable};\n",
        "description": "Export named variable in ES6 syntax"
    },
    "exportNamedFunction": {
        "prefix": "enf",
        "body": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n",
        "description": "Export named function in ES6 syntax"
    },
    "exportDefaultFunction": {
        "prefix": "edf",
        "body": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n",
        "description": "Export default function in ES6 syntax"
    },
    "exportClass": {
        "prefix": "ecl",
        "body": "export default class ${1:className} {\n\t$0\n};\n",
        "description": "Export default class in ES6 syntax"
    },
    "exportClassExtends": {
        "prefix": "ece",
        "body": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n",
        "description": "Export default class which extends a base one in ES6 syntax"
    },
    "constructor": {
        "prefix": "con",
        "body": "constructor(${1:params}) {\n\t${0}\n}",
        "description": "Add default constructor in a class in ES6 syntax"
    },
    "method": {
        "prefix": "met",
        "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
        "description": "Creates a method inside a class in ES6 syntax"
    },
    "propertyGet": {
        "prefix": "pge",
        "body": "get ${1:propertyName}() {\n\treturn this.${0};\n}",
        "description": "Creates a getter property inside a class in ES6 syntax"
    },
    "propertyset": {
        "prefix": "pse",
        "body": "set ${1:propertyName}(${2:value}) {\n\t${0};\n}",
        "description": "Creates a setter property inside a class in ES6 syntax"
    },
    "forEach": {
        "prefix": "fre",
        "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n});",
        "description": "Creates a forEach statement in ES6 syntax"
    },
    "forOf": {
        "prefix": "fof",
        "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
        "description": "Iterating over property names of iterable objects"
    },
    "forIn": {
        "prefix": "fin",
        "body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
        "description": "Iterating over property values of iterable objects"
    },
    "anonymousFunction": {
        "prefix": "anfn",
        "body": "(${1:params}) => {\n\t${2}\n}",
        "description": "Creates an anonymous function in ES6 syntax"
    },
    "namedFunction": {
        "prefix": "nfn",
        "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
        "description": "Creates a named function in ES6 syntax"
    },
    "destructingObject": {
        "prefix": "dob",
        "body": "const {${2:propertyName}} = ${1:objectToDestruct};",
        "description": "Creates and assigns a local variable using object destructing"
    },
    "destructingArray": {
        "prefix": "dar",
        "body": "const [${2:propertyName}] = ${1:arrayToDestruct};",
        "description": "Creates and assigns a local variable using array destructing"
    },
    "setInterval": {
        "prefix": "sti",
        "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms});",
        "description": "Executes the given function at specified intervals in ES6 syntax"
    },
    "setTimeOut": {
        "prefix": "sto",
        "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms});",
        "description": "Executes the given function after the specified delay in ES6 syntax"
    },
    "promise": {
        "prefix": "prom",
        "body": "return new Promise((resolve, reject) => {\n\t${1}\n});",
        "description": "Creates and returns a new Promise in the standard ES6 syntax"
    },
    "thenCatch": {
        "prefix": "thenc",
        "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n});",
        "description": "Add the .then and .catch methods to handle promises"
    },
    "consoleAssert": {
        "prefix": "cas",
        "body": "console.assert(${1:expression}, ${2:object});",
        "description": "If the specified expression is false, the message is written to the console along with a stack trace"
    },
    "consoleClear": {
        "prefix": "ccl",
        "body": "console.clear();",
        "description": "Clears the console"
    },
    "consoleCount": {
        "prefix": "cco",
        "body": "console.count(${1:label});",
        "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
    },
    "consoleDebug": {
        "prefix": "cdb",
        "body": "console.debug(${1:object});",
        "description": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari"
    },
    "consoleDir": {
        "prefix": "cdi",
        "body": "console.dir(${1:object});",
        "description": "Prints a JavaScript representation of the specified object"
    },
    "consoleError": {
        "prefix": "cer",
        "body": "console.error(${1:object});",
        "description": "Displays a message in the console and also includes a stack trace from where the method was called"
    },
    "consoleGroup": {
        "prefix": "cgr",
        "body": "console.group('${1:label}');",
        "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
    },
    "consoleGroupEnd": {
        "prefix": "cge",
        "body": "console.groupEnd();",
        "description": "Closes out the corresponding console.group()."
    },
    "consoleLog": {
        "prefix": "clg",
        "body": "console.log(${1:object});",
        "description": "Displays a message in the console"
    },
    "consoleLogObject": {
        "prefix": "clo",
        "body": "console.log('${1:object} :>> ', ${1:object});",
        "description": "Displays an object in the console with its name"
    },
    "consoleTrace": {
        "prefix": "ctr",
        "body": "console.trace(${1:object});",
        "description": "Prints a stack trace from the point where the method was called"
    },
    "consoleWarn": {
        "prefix": "cwa",
        "body": "console.warn(${1:object});",
        "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
    },
    "consoleInfo": {
        "prefix": "cin",
        "body": "console.info(${1:object});",
        "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
    },
    "consoleTable": {
        "prefix": "clt",
        "body": "console.table(${1:object});",
        "description": "Displays tabular data as a table."
    },
    "consoleTime": {
        "prefix": "cti",
        "body": "console.time(${1:object});",
        "description": "Sets starting point for execution time measurement"
    },
    "consoleTimeEnd": {
        "prefix": "cte",
        "body": "console.timeEnd(${1:object});",
        "description": "Sets end point for execution time measurement"
    },
    "node snippets": {
        "prefix": "ns",
        "body": "",
        "description": "node snippets start ==================================="
    },
    "http-quark": {
        "prefix": "node-http-quark",
        "body": [
            "const quark = require('quarkhttp');",
            "const app = quark();",
            "app.get('/', (req, res) => res.send('hello world'))",
            "app.listen(3000, () => {",
            "  console.log('Server running on 3000');",
            "})"
        ],
        "description": "a micro HTTP framework, creates an app with a route"
    },
    "http-quark-get": {
        "prefix": "node-http-quark-get",
        "body": [
            "app.get('/products', (req, res) => res.json([{ id: 1, name: 'a product' }]))"
        ],
        "description": "a micro HTTP framework, adds a GET route"
    },
    "http-quark-post": {
        "prefix": "node-http-quark-post",
        "body": [
            "app.post('/products', (req,res) => {",
            "  console.info('body', req.body)",
            "  res.json(req.body);",
            "})"
        ],
        "description": "a micro HTTP framework, adds a POST route"
    },
    "http-quark-put": {
        "prefix": "node-http-quark-put",
        "body": [
            "app.put('/products', (req,res) => {",
            "  console.info('body', req.body)",
            "  res.json(req.body);",
            "})"
        ],
        "description": "a micro HTTP framework, adds a PUT route"
    },
    "http-quark-middleware": {
        "prefix": "node-http-quark-middleware",
        "body": [
            "app.get('/orders', (req, res, next) => {",
            "  if (req.headers['authorization'] === 'abc123') {",
            "    next()",
            "  } else {",
            "    res.statusCode = 401;",
            "    res.send('Not allowed')",
            "  }",
            "}, (req, res) => {",
            "  res.send('Protected route');",
            "})"
        ],
        "description": "a micro HTTP framework, adds a middleware"
    },
    "jest-suite": {
        "prefix": "node-jest-suite",
        "body": [
            "describe('$1', () => {",
            "  ",
            "})"
        ]
    },
    "jest-test": {
        "prefix": "node-jest-test",
        "body": [
            "test('$1', () => {$2})"
        ]
    },
    "jest-test-expect": {
        "prefix": "node-jest-test-expect",
        "body": [
            "test('$2', () => {",
            "  expect(1).toBe(2)",
            "})"
        ]
    },
    "jest-expect": {
        "prefix": "node-jest-expect",
        "body": [
            " expect(1).toBe(2)"
        ]
    },
    "jest-expect-to-equal": {
        "prefix": "node-jest-expect-to-equal",
        "body": [
            "let obj = { a: '1' }",
            "expect(obj).toEqual({ a: '1' })"
        ]
    },
    "jest-test-expect-to-equal": {
        "prefix": "node-jest-test-expect-to-equal",
        "body": [
            "test('$2', () => {",
            "  let obj = { a: '1' }",
            "  expect(obj).toEqual({ a: '1' })",
            "})"
        ]
    },
    "jest-expect-to-throw": {
        "prefix": "node-jest-expect-to-throw",
        "body": [
            "const thisThrows = () => throw new Error('error message')",
            "expect(thisThrows).toThrow('error message')"
        ]
    },
    "jest-test-expect-to-throw": {
        "prefix": "node-jest-test-expect-to-throw",
        "body": [
            "test('$2', () => {",
            "  const thisThrows = () => throw new Error('error message')",
            "  expect(thisThrows).toThrow('error message')",
            "})"
        ]
    },
    "jest-test-beforeAll": {
        "prefix": "node-jest-test-beforeAll",
        "body": [
            "  beforeAll(() => {",
            "    ",
            "  })"
        ]
    },
    "jest-test-afterAll": {
        "prefix": "node-jest-test-afterAll",
        "body": [
            "  afterAll(() => {",
            "    ",
            "  })"
        ]
    },
    "regex-test-digits": {
        "prefix": "node-regex-test-digits",
        "body": [
            "const isMatch = /\\d+/.test('abc123')"
        ],
        "description": "test if string contains digits, returns true/false"
    },
    "regex-test-word": {
        "prefix": "node-regex-test-word",
        "body": [
            "const isMatch = /\\w+/.test('abc123')"
        ],
        "description": "test if string contains a word boundary, returns true/false"
    },
    "regex-test-match": {
        "prefix": "node-regex-match",
        "body": [
            "const [, extension] = 'file.txt'.match(/\\.(\\w+)/)"
        ],
        "description": "matches a file extension"
    },
    "regex-test-match-named-group": {
        "prefix": "node-regex-match-named-group",
        "body": [
            "const { groups: { extension } } = 'file.txt'.match(/\\.(?<extension>\\w+)/)"
        ],
        "description": "matches a file extension, "
    },
    "express server": {
        "prefix": "node-express",
        "body": [
            "const express = require('express')",
            "const app = express()",
            "const port = 3000",
            "",
            "app.get('/', (req, res) => res.send('Hello World!'))",
            "app.listen(port, () => console.log(`Example app listening on port ${port}!`))"
        ],
        "description": "Creates an express server"
    },
    "express GET": {
        "prefix": "node-express-get",
        "body": [
            "app.get('/', (req, res) => {",
            "  res.send('GET request to the homepage')",
            "})"
        ],
        "description": "Creates a GET route"
    },
    "express GET params": {
        "prefix": "node-express-get-params",
        "body": [
            "app.get('/books/:bookId', (req, res) => {",
            "  res.send(req.params.bookId)",
            "})"
        ],
        "description": "Creates a GET route and shows how to access params"
    },
    "express POST": {
        "prefix": "node-express-post",
        "body": [
            "app.post('/', function (req, res) {",
            "  res.send('POST request to the homepage')",
            "})"
        ],
        "description": "Creates a POST route"
    },
    "express POST params": {
        "prefix": "node-express-post-params",
        "body": [
            "var bodyParser = require('body-parser');",
            "app.use(bodyParser.json());",
            "",
            "app.post('/update', function(req, res) {",
            "  const { name, description } = req.body;",
            "  res.send(`Name ${name}, desc ${description}`);",
            "});"
        ],
        "description": "Creates a POST route that can read from the body"
    },
    "express PUT params": {
        "prefix": "node-express-put-params",
        "body": [
            "var bodyParser = require('body-parser');",
            "app.use(bodyParser.json());",
            "",
            "app.put('/products', function(req, res) {",
            "  const { id, name, description } = req.body;",
            "  res.send(`Name ${id} ${name}, desc ${description}`);",
            "});"
        ],
        "description": "Creates a POST route that can read from the body"
    },
    "express DELETE params": {
        "prefix": "node-express-delete-params",
        "body": [
            "var bodyParser = require('body-parser');",
            "app.use(bodyParser.json());",
            "",
            "app.delete('/products/:id', function(req, res) {",
            "  const { id } = req.params;",
            "  res.send(`Delete record with id ${id}`);",
            "});"
        ],
        "description": "Creates a POST route that can read from the body"
    },
    "express QUERY params": {
        "prefix": "node-express-query-params",
        "body": [
            "var bodyParser = require('body-parser');",
            "app.use(bodyParser.json());",
            "",
            "// for routes looking like this `/products?page=1&pageSize=50`",
            "app.get('/products', function(req, res) {",
            "  const page = req.query.page;",
            "  const pageSize = req.query.pageSize;",
            "  res.send(`Filter with parameters ${page} and ${pageSize});`",
            "});"
        ],
        "description": "Creates a POST route that can read from the body"
    },
    "express POST params version >=4.16": {
        "prefix": "node-express-post-params-alt",
        "body": [
            "app.use(express.json())",
            "app.listen(8080)",
            "",
            "app.post('/test', (req, res) => {",
            "  res.json({ body: req.body })",
            "});"
        ],
        "description": "Creates a POST route that can read from the body, works for 4.16 version of express and above"
    },
    "express middleware": {
        "prefix": "node-express-middleware-logger",
        "body": [
            "const logger = function (req, res, next) {",
            "  console.log('logging')",
            "  next()",
            "}",
            "",
            "app.use(logger)",
            "",
            "app.get('/', (req, res) => {",
            "  res.send('Hello World!')",
            "})"
        ],
        "description": "Creates a middleware"
    },
    "express middleware error": {
        "prefix": "node-express-middleware-error",
        "body": [
            "app.use(function (err, req, res, next) {",
            "  console.error(err.stack)",
            "  res.status(500).send('Something broke!')",
            "});"
        ],
        "description": "Creates a error middleware"
    },
    "http server": {
        "prefix": "node-http-server",
        "body": [
            "var http = require('http');",
            "http.createServer(function (request, response) {",
            "  response.writeHead(200, {'Content-Type': 'text/plain'});",
            "  response.end('Hello World');",
            "}).listen(8081);",
            "",
            "console.log('Server running at http://127.0.0.1:8081/');"
        ],
        "description": "Creates a simple HTTP server"
    },
    "file read sync": {
        "prefix": "node-file-read-sync",
        "body": [
            "var fs = require('fs');",
            "var data = fs.readFileSync('file.txt');"
        ],
        "description": "Reads a file synchronously"
    },
    "file read async": {
        "prefix": "node-file-read-async",
        "body": [
            "var fs = require('fs');",
            "fs.readFile('input.txt', function (err, data) {",
            "  if (err) return console.error(err);",
            "  console.log(data.toString());",
            "});"
        ],
        "description": "Reads a file asynchronously"
    },
    "event emitter": {
        "prefix": "node-event-emitter",
        "body": [
            "var events = require('events');",
            "var eventEmitter = new events.EventEmitter();",
            "eventEmitter.emit('my_event');",
            "eventEmitter.on('my_event', () => {",
            "  console.log('data received successfully.');",
            "});"
        ],
        "description": "Event emitter, shows emitting event and subscribing to it"
    },
    "Promise creation": {
        "prefix": "node-promise-create",
        "body": [
            "new Promise((resolve, reject) => {",
            "  let condition = false;",
            "  if(condition) {",
            "    resolve('data')",
            "  } else {",
            "    reject('error')",
            "}",
            "})"
        ],
        "description": "creates a Promise by instantiating it"
    },
    "Promise shorthand": {
        "prefix": "node-promise-shorthand",
        "body": [
            "const promiseThatWillResolve = Promise.resolve('data');",
            "const promiseThatWillReject = Promise.reject('error');"
        ],
        "description": "uses the static resolve/reject, good for unit tests"
    },
    "Promise all": {
        "prefix": "node-promise-all",
        "body": [
            "const getData = () => Promise.resolve('data');",
            "const getMoreData = () => Promise.resolve('more data');",
            "",
            "Promise.all(",
            "  getData(),",
            "  getMoreData()",
            ").then(result => {",
            "  const [data, moreData] = result;",
            "})"
        ],
        "description": "uses the static all(), allows us to have a list of Promises finish at the same time"
    },
    "Async/await": {
        "prefix": "node-async-await",
        "body": [
            "async function getData() {",
            "  return Promise.resolve('data');",
            "}",
            "",
            "async function getMoreData(data) {",
            "  return Promise.resolve(data + 'more data');",
            "}",
            "",
            "function getAll() {",
            "  const data = await getData();",
            "  const moreData = await getMoreData(data);",
            "  return `All the data: ${data}, ${moreData}`;",
            "}",
            "",
            "getAll().then((all) => {",
            "  console.log('all the data')",
            "})"
        ],
        "description": "demonstrates async/await"
    },
    "Joi schema validation": {
        "prefix": "node-express-schema-validation",
        "body": [
            "const Joi = require('joi');",
            "const loginSchema = Joi.object().keys({",
            "  username: Joi.string()",
            "    .min(3),",
            "    .max(10),",
            "    .required(),",
            "  password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/)",
            "});",
            "",
            "app.post('/login', function(req, res) {",
            "  const valid = Joi.validate(req.body, loginSchema).error === null;",
            "  if (!valid) {",
            "    res.status(422).json({",
            "      status: 'error'",
            "      message: 'Invalid request data'",
            "      data: req.body",
            "    });",
            "  } else {",
            "    // happy days - login user",
            "    res.send(`ok`);",
            "  }",
            "});"
        ],
        "description": "showcases the lib Joi and how you can use it to validate incoming requests"
    },
    "supertest-init": {
        "prefix": "node-supertest-init",
        "body": [
            "const supertest = require('supertest')",
            "const app = require('../app');",
            "const server = app.listen(3000, () => {",
            "  console.log('listening at port 3000')",
            "})",
            "let request;"
        ],
        "description": "Sets up supertest by importing supertest and the app you mean to test. Additionally starts the app"
    },
    "supertest-beforeall": {
        "prefix": "node-supertest-beforeall",
        "body": [
            "beforeAll(() => {",
            "  request = supertest(app)",
            "})"
        ],
        "description": "Configures supertest to use the app, this is needed"
    },
    "supertest-afterall": {
        "prefix": "node-supertest-aftereall",
        "body": [
            "afterAll(async(close) => {",
            "  server.close(() => {",
            "    close()",
            "   console.log('server closed');",
            "  })",
            "})"
        ],
        "description": "Ensures the web app closes down after the test run, this is needed"
    },
    "supertest-testGET": {
        "prefix": "node-supertest-testget",
        "body": [
            "test('testing a GET route', async () => {",
            "  let products = [",
            "  {",
            "    id: 1,",
            "    name: 'book'",
            "  },",
            "  {",
            "    id: 2,",
            "    name: 'book2'",
            "  }",
            " ];",
            "",
            "  const res = await request.get('/products');",
            "  expect(res.status).toBe(200);",
            "  expect(res.body).toEqual(products);",
            "})"
        ],
        "description": "An example of supertest testing a GET route"
    },
    "supertest-testGETWithParam": {
        "prefix": "node-supertest-testgetwithparam",
        "body": [
            "test('testing a GET route with router param', async () => {",
            "  let product = {",
            "    id: 1,",
            "    name: 'book'",
            "  };",
            "  const res = await request.get('/products/1');",
            "  expect(res.status).toBe(200);",
            "  expect(res.body).toEqual(product);",
            "});"
        ],
        "description": "An example of supertest testing a GET route with a route parameter"
    },
    "supertest-testPOSTWithParam": {
        "prefix": "node-supertest-testpost",
        "body": [
            "test('testing a POST route with a payload', async () => {",
            "  let product = {",
            "    name: 'book3'",
            "  };",
            "  const res = await request",
            "  .post('/products')",
            "  .send(product);",
            "  expect(res.status).toBe(200);",
            "  expect(res.body).toEqual({ id: 3, ...product});",
            "",
            "  const newRes = await request.get('/products');",
            "  let products = [",
            "  {",
            "    id: 1,",
            "    name: 'book'",
            "  },",
            "  {",
            "    id: 2,",
            "    name: 'book2'",
            "  },",
            "  {",
            "    id: 3,",
            "    name: 'book3',",
            "  }",
            " ];",
            "  expect(newRes.body).toEqual(products);",
            "});"
        ],
        "description": "An example of supertest testing a POST route with a payload"
    }
}
